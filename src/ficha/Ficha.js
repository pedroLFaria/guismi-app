// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
import queryString from "query-string";

function toFicha(json) {
    return cast(JSON.parse(json), r("Ficha"));
}

function fichaToJson(value) {
    return JSON.stringify(uncast(value, r("Ficha")), null, 2);
}

function invalidValue(typ, val) {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val, typ, getProps) {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    return transformPrimitive(typ, val);
}

function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}

function a(typ) {
    return { arrayItems: typ };
}

function u(...typs) {
    return { unionMembers: typs };
}

function o(props, additional) {
    return { props, additional };
}

function m(additional) {
    return { props: [], additional };
}

function r(name) {
    return { ref: name };
}

const typeMap = {
    "Ficha": o([
        { json: "idFicha", js: "idFicha", typ: 0 },
        { json: "idRaca", js: "idRaca", typ: 0 },
        { json: "idCidade", js: "idCidade", typ: 0 },
        { json: "idJogador", js: "idJogador", typ: 0 },
        { json: "nomePersonagem", js: "nomePersonagem", typ: "" },
        { json: "img", js: "img", typ: "" },
        { json: "idade", js: "idade", typ: 0 },
        { json: "afiliacao", js: "afiliacao", typ: "" },
        { json: "cla", js: "cla", typ: "" },
        { json: "sorteDia", js: "sorteDia", typ: 0 },
        { json: "distForca", js: "distForca", typ: 0 },
        { json: "distConstituicao", js: "distConstituicao", typ: 0 },
        { json: "distAgilidade", js: "distAgilidade", typ: 0 },
        { json: "distDestreza", js: "distDestreza", typ: 0 },
        { json: "distInteligencia", js: "distInteligencia", typ: 0 },
        { json: "distSabedoria", js: "distSabedoria", typ: 0 },
        { json: "distCarisma", js: "distCarisma", typ: 0 },
        { json: "nivelPersonagem", js: "nivelPersonagem", typ: 0 },
        { json: "expPersonagem", js: "expPersonagem", typ: 0 },
        { json: "descPersonagem", js: "descPersonagem", typ: "" },
        { json: "histPersonagem", js: "histPersonagem", typ: "" },
        { json: "nota", js: "nota", typ: "" },
        { json: "idSanidade", js: "idSanidade", typ: 0 },
        { json: "raca", js: "raca", typ: r("Raca") },
        { json: "caminhos", js: "caminhos", typ: a(r("Caminho")) },
        { json: "descendencias", js: "descendencias", typ: a(r("Descendencia")) },
        { json: "habilidades", js: "habilidades", typ: a(r("Habilidade")) },
        { json: "habitos", js: "habitos", typ: a(r("Habito")) },
        { json: "idiomas", js: "idiomas", typ: a("any") },
        { json: "inventarios", js: "inventarios", typ: a("any") },
        { json: "patronos", js: "patronos", typ: a(r("Patrono")) },
        { json: "situacoes", js: "situacoes", typ: a(r("Situacoe")) },
    ], false),
    "Caminho": o([
        { json: "idCaminho", js: "idCaminho", typ: 0 },
        { json: "nomeCaminho", js: "nomeCaminho", typ: "" },
        { json: "descCaminho", js: "descCaminho", typ: "" },
        { json: "habilidades", js: "habilidades", typ: a(r("Habilidade")) },
        { json: "especializacoes", js: "especializacoes", typ: a("any") },
        { json: "habitos", js: "habitos", typ: a(r("Habito")) },
    ], false),
    "Habilidade": o([
        { json: "idHabilidade", js: "idHabilidade", typ: 0 },
        { json: "nomeHabilidade", js: "nomeHabilidade", typ: "" },
        { json: "atrAtacante", js: "atrAtacante", typ: "" },
        { json: "tipoHabilidade", js: "tipoHabilidade", typ: "" },
        { json: "utiHabilidade", js: "utiHabilidade", typ: "" },
        { json: "descHabilidade", js: "descHabilidade", typ: "" },
        { json: "prerequisito", js: "prerequisito", typ: "" },
        { json: "nivelRequerido", js: "nivelRequerido", typ: 0 },
        { json: "acoes", js: "acoes", typ: a(r("Acoe")) },
        { json: "gasto", js: "gasto", typ: a("any") },
        { json: "situacoes", js: "situacoes", typ: a(r("Situacoe")) },
    ], false),
    "Acoe": o([
        { json: "idAcao", js: "idAcao", typ: 0 },
        { json: "nomeacao", js: "nomeacao", typ: "" },
    ], false),
    "Situacoe": o([
        { json: "idSituacao", js: "idSituacao", typ: 0 },
        { json: "nomeSituacao", js: "nomeSituacao", typ: "" },
        { json: "descSituacao", js: "descSituacao", typ: "" },
    ], false),
    "Habito": o([
        { json: "idHabito", js: "idHabito", typ: 0 },
        { json: "nomeHabito", js: "nomeHabito", typ: "" },
        { json: "descHabito", js: "descHabito", typ: "" },
        { json: "qtdFichaHabito", js: "qtdFichaHabito", typ: u(0, null) },
        { json: "especializacoes", js: "especializacoes", typ: a(r("Especializacoe")) },
    ], false),
    "Especializacoe": o([
        { json: "idEspecializacao", js: "idEspecializacao", typ: 0 },
        { json: "nomeEspecializacao", js: "nomeEspecializacao", typ: "" },
        { json: "descEspecializacao", js: "descEspecializacao", typ: "" },
    ], false),
    "Descendencia": o([
        { json: "idDescendencia", js: "idDescendencia", typ: 0 },
        { json: "nomeDescendencia", js: "nomeDescendencia", typ: "" },
        { json: "descDescendencia", js: "descDescendencia", typ: "" },
        { json: "habilidades", js: "habilidades", typ: a(r("Habilidade")) },
        { json: "habitos", js: "habitos", typ: a(r("Habito")) },
        { json: "sanidade", js: "sanidade", typ: null },
        { json: "situacoes", js: "situacoes", typ: a("any") },
    ], false),
    "Patrono": o([
        { json: "idPatrono", js: "idPatrono", typ: 0 },
        { json: "nomePatrono", js: "nomePatrono", typ: "" },
        { json: "descPatrono", js: "descPatrono", typ: "" },
    ], false),
    "Raca": o([
        { json: "idRaca", js: "idRaca", typ: 0 },
        { json: "nomeRaca", js: "nomeRaca", typ: "" },
        { json: "raridadeRaca", js: "raridadeRaca", typ: "" },
        { json: "descRaca", js: "descRaca", typ: "" },
        { json: "longevidadeRaca", js: "longevidadeRaca", typ: "" },
        { json: "culturaRaca", js: "culturaRaca", typ: "" },
        { json: "historiaRaca", js: "historiaRaca", typ: "" },
        { json: "racaForca", js: "racaForca", typ: 0 },
        { json: "racaConstituicao", js: "racaConstituicao", typ: 0 },
        { json: "racaAgilidade", js: "racaAgilidade", typ: 0 },
        { json: "racaDestreza", js: "racaDestreza", typ: 0 },
        { json: "racaInteligencia", js: "racaInteligencia", typ: 0 },
        { json: "racaSabedoria", js: "racaSabedoria", typ: 0 },
        { json: "racaCarisma", js: "racaCarisma", typ: 0 },
        { json: "sangue", js: "sangue", typ: 0 },
        { json: "vigor", js: "vigor", typ: 0 },
        { json: "descendencias", js: "descendencias", typ: a(r("Descendencia")) },
        { json: "especializacoes", js: "especializacoes", typ: a(r("Especializacoe")) },
        { json: "habilidades", js: "habilidades", typ: a("any") },
        { json: "habitos", js: "habitos", typ: a(r("Habito")) },
        { json: "idiomas", js: "idiomas", typ: a("any") },
        { json: "patronos", js: "patronos", typ: a(r("Patrono")) },
        { json: "tracosfisiologicos", js: "tracosfisiologicos", typ: "" },
    ], false),
};

function findById(id){
    fetch("api/ficha/id/" + id, { method: "GET", Header: new Headers() })
        .then(response => toFicha(response.text()))
        .then(data => {
            sessionStorage.setItem("ficha", JSON.stringify(data));

        })
}

module.exports = {
    "findById":findById,
    "fichaToJson": fichaToJson,
    "toFicha": toFicha,
};
